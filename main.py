import time
from fastapi import FastAPI, Request
from copilot_api import CopilotAPI
from line_bot import LineBot
import asyncio

app = FastAPI()
copilot = CopilotAPI()
line_bot = LineBot()

@app.get("/")
def read_root():
    return {"Hello": "World"}

async def wait_for_bot_response(copilot, token, conversation_id, timeout=30, interval=2):
    """
    ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ timeout
    """
    start_time = time.perf_counter()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    elapsed_time = 0
    
    while elapsed_time < timeout:
        res = copilot.get_messages(token, conversation_id)
        print("üì© Full response from API:", res)

        activities = res.get("activities", [])
        bot_messages = [msg for msg in activities if isinstance(msg, dict) and msg.get("from", {}).get("id", "") != "user1"]
        
        if bot_messages:
            end_time = time.perf_counter()  # ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            print(f"‚úÖ Bot ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {end_time - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            return bot_messages  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        
        await asyncio.sleep(interval)  # ‡∏£‡∏≠ interval ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        elapsed_time += interval

    print("‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó")
    return []  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡∏ß‡πà‡∏≤‡∏á

@app.post("/webhook")
async def webhook(request: Request):
    try:
        total_start = time.perf_counter()  # ‚è± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        body = await request.json()
        print("üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE Messaging API:", body)

        events = body.get("events", [])

        for event in events:
            if event.get("type") == "message" and event["message"].get("type") == "text":
                process_start = time.perf_counter()  # ‚è± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ process
                
                user_msg = event["message"]["text"]
                reply_token = event["replyToken"]

                # ‚è± ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠ Token
                token_start = time.perf_counter()
                token = copilot.get_token()
                token_end = time.perf_counter()
                print(f"üîë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Token ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {token_end - token_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                if not token:
                    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö token ‡πÑ‡∏î‡πâ")
                    line_bot.reply_message(reply_token, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á")
                    return {"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö token ‡πÑ‡∏î‡πâ"}
                
                # ‚è± ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Conversation
                conversation_start = time.perf_counter()
                conversation_id = copilot.start_conversation(token)
                conversation_end = time.perf_counter()
                print(f"üí¨ ‡πÄ‡∏£‡∏¥‡πà‡∏° Conversation ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {conversation_end - conversation_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                if not conversation_id:
                    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° conversation ‡πÑ‡∏î‡πâ")
                    line_bot.reply_message(reply_token, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á")
                    return {"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° conversation ‡πÑ‡∏î‡πâ"}
                
                # ‚è± ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Copilot
                send_start = time.perf_counter()
                send_result = copilot.send_message(token, conversation_id, user_msg)
                send_end = time.perf_counter()
                print(f"üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Copilot ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {send_end - send_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
                bot_messages = await wait_for_bot_response(copilot, token, conversation_id)

                # ‚è± ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                select_reply_start = time.perf_counter()
                reply_text = bot_messages[-1].get("text", "") if bot_messages else "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á"
                select_reply_end = time.perf_counter()
                print(f"‚úèÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {select_reply_end - select_reply_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                # ‚è± ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
                reply_start = time.perf_counter()
                if send_result and bot_messages:
                    line_bot.reply_message(reply_token, reply_text)
                else:
                    line_bot.reply_message(reply_token, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á")
                reply_end = time.perf_counter()
                print(f"üì© ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {reply_end - reply_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                process_end = time.perf_counter()
                print(f"‚úÖ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {process_end - process_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        total_end = time.perf_counter()
        print(f"üöÄ Webhook process ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {total_end - total_start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

    except Exception as e:
        print("‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)
        return {"error": "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}

    return {"status": "success"}
